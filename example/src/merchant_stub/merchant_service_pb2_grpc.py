# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import data_pb2 as data__pb2
import manager_backend_pb2 as manager__backend__pb2
import offline_order_pb2 as offline__order__pb2


class MerchantServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryShop = channel.unary_unary(
                '/merchant.MerchantService/QueryShop',
                request_serializer=common__pb2.QueryInfo.SerializeToString,
                response_deserializer=data__pb2.Shops.FromString,
                )
        self.QuerySupplier = channel.unary_unary(
                '/merchant.MerchantService/QuerySupplier',
                request_serializer=common__pb2.QueryInfo.SerializeToString,
                response_deserializer=data__pb2.Suppliers.FromString,
                )
        self.QueryUser = channel.unary_unary(
                '/merchant.MerchantService/QueryUser',
                request_serializer=common__pb2.QueryInfo.SerializeToString,
                response_deserializer=data__pb2.Users.FromString,
                )
        self.QueryCategory = channel.unary_unary(
                '/merchant.MerchantService/QueryCategory',
                request_serializer=common__pb2.QueryInfo.SerializeToString,
                response_deserializer=data__pb2.Categories.FromString,
                )
        self.QueryComment = channel.unary_unary(
                '/merchant.MerchantService/QueryComment',
                request_serializer=common__pb2.QueryInfo.SerializeToString,
                response_deserializer=data__pb2.Comments.FromString,
                )
        self.UpsertShop = channel.unary_unary(
                '/merchant.MerchantService/UpsertShop',
                request_serializer=data__pb2.UpdateShopReq.SerializeToString,
                response_deserializer=data__pb2.ShopRsb.FromString,
                )
        self.UpsertSupplier = channel.unary_unary(
                '/merchant.MerchantService/UpsertSupplier',
                request_serializer=data__pb2.UpdateSupplierReq.SerializeToString,
                response_deserializer=data__pb2.SupplierRsb.FromString,
                )
        self.UpsertAccount = channel.unary_unary(
                '/merchant.MerchantService/UpsertAccount',
                request_serializer=data__pb2.UpdateUserReq.SerializeToString,
                response_deserializer=data__pb2.UserRsb.FromString,
                )
        self.DeleteAccount = channel.unary_unary(
                '/merchant.MerchantService/DeleteAccount',
                request_serializer=data__pb2.DeleteUserReq.SerializeToString,
                response_deserializer=data__pb2.UserRsb.FromString,
                )
        self.DeleteSupplier = channel.unary_unary(
                '/merchant.MerchantService/DeleteSupplier',
                request_serializer=data__pb2.DeleteById.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.DeleteShop = channel.unary_unary(
                '/merchant.MerchantService/DeleteShop',
                request_serializer=data__pb2.DeleteById.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.CounterShop = channel.unary_unary(
                '/merchant.MerchantService/CounterShop',
                request_serializer=data__pb2.CounterShopReq.SerializeToString,
                response_deserializer=data__pb2.CounterShopRsb.FromString,
                )
        self.CreateBrandCollection = channel.unary_unary(
                '/merchant.MerchantService/CreateBrandCollection',
                request_serializer=data__pb2.BrandCollectionReq.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.UpdateBrandCollection = channel.unary_unary(
                '/merchant.MerchantService/UpdateBrandCollection',
                request_serializer=data__pb2.BrandCollectionReq.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.QueryBrandCollection = channel.unary_unary(
                '/merchant.MerchantService/QueryBrandCollection',
                request_serializer=data__pb2.QueryBrandCollectionReq.SerializeToString,
                response_deserializer=data__pb2.QueryBrandCollectionRsb.FromString,
                )
        self.UpsertComments = channel.unary_unary(
                '/merchant.MerchantService/UpsertComments',
                request_serializer=data__pb2.UpdateCommentsReq.SerializeToString,
                response_deserializer=data__pb2.UpdateCommentsRsb.FromString,
                )
        self.DeleteComment = channel.unary_unary(
                '/merchant.MerchantService/DeleteComment',
                request_serializer=data__pb2.DeleteById.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.QueryOfflineOrder = channel.unary_unary(
                '/merchant.MerchantService/QueryOfflineOrder',
                request_serializer=common__pb2.QueryInfo.SerializeToString,
                response_deserializer=offline__order__pb2.QueryOfflineOrderResp.FromString,
                )
        self.ReviewOfflineOrder = channel.unary_unary(
                '/merchant.MerchantService/ReviewOfflineOrder',
                request_serializer=offline__order__pb2.ReviewOfflineOrderReq.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.UpdateOfflineOrderAmount = channel.unary_unary(
                '/merchant.MerchantService/UpdateOfflineOrderAmount',
                request_serializer=offline__order__pb2.UpdateOfflineOrderAmountReq.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.QueryOfflineOrderOperationRecord = channel.unary_unary(
                '/merchant.MerchantService/QueryOfflineOrderOperationRecord',
                request_serializer=common__pb2.QueryInfo.SerializeToString,
                response_deserializer=offline__order__pb2.QueryOfflineOrderOperationRecordResp.FromString,
                )
        self.AddOfflineOrderOperationRecord = channel.unary_unary(
                '/merchant.MerchantService/AddOfflineOrderOperationRecord',
                request_serializer=offline__order__pb2.AddOfflineOrderOperationRecordReq.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.Login = channel.unary_unary(
                '/merchant.MerchantService/Login',
                request_serializer=manager__backend__pb2.LoginReq.SerializeToString,
                response_deserializer=manager__backend__pb2.LoginRes.FromString,
                )
        self.CheckToken = channel.unary_unary(
                '/merchant.MerchantService/CheckToken',
                request_serializer=manager__backend__pb2.CheckTokenReq.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.QueryApplyRecord = channel.unary_unary(
                '/merchant.MerchantService/QueryApplyRecord',
                request_serializer=common__pb2.QueryInfo.SerializeToString,
                response_deserializer=data__pb2.QueryApplyRecordResp.FromString,
                )
        self.QueryDistrict = channel.unary_unary(
                '/merchant.MerchantService/QueryDistrict',
                request_serializer=common__pb2.QueryInfo.SerializeToString,
                response_deserializer=data__pb2.QueryDistrictResp.FromString,
                )
        self.UpsertApplyRecord = channel.unary_unary(
                '/merchant.MerchantService/UpsertApplyRecord',
                request_serializer=data__pb2.UpsertApplyRecordReq.SerializeToString,
                response_deserializer=data__pb2.UpsertApplyRecordResp.FromString,
                )
        self.UpsertDistrict = channel.unary_unary(
                '/merchant.MerchantService/UpsertDistrict',
                request_serializer=data__pb2.UpsertDistrictReq.SerializeToString,
                response_deserializer=data__pb2.UpsertDistrictResp.FromString,
                )


class MerchantServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def QueryShop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySupplier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryCategory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertShop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertSupplier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSupplier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteShop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CounterShop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBrandCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBrandCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryBrandCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertComments(self, request, context):
        """二期
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryOfflineOrder(self, request, context):
        """二期
        查询线下消费订单
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReviewOfflineOrder(self, request, context):
        """审核线下消费订单
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOfflineOrderAmount(self, request, context):
        """更新线下消费订单金额
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryOfflineOrderOperationRecord(self, request, context):
        """查询线下消费订单操作记录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddOfflineOrderOperationRecord(self, request, context):
        """新增线下消费订单操作记录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryApplyRecord(self, request, context):
        """入驻审核
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryDistrict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertApplyRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertDistrict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MerchantServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryShop': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryShop,
                    request_deserializer=common__pb2.QueryInfo.FromString,
                    response_serializer=data__pb2.Shops.SerializeToString,
            ),
            'QuerySupplier': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySupplier,
                    request_deserializer=common__pb2.QueryInfo.FromString,
                    response_serializer=data__pb2.Suppliers.SerializeToString,
            ),
            'QueryUser': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryUser,
                    request_deserializer=common__pb2.QueryInfo.FromString,
                    response_serializer=data__pb2.Users.SerializeToString,
            ),
            'QueryCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryCategory,
                    request_deserializer=common__pb2.QueryInfo.FromString,
                    response_serializer=data__pb2.Categories.SerializeToString,
            ),
            'QueryComment': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryComment,
                    request_deserializer=common__pb2.QueryInfo.FromString,
                    response_serializer=data__pb2.Comments.SerializeToString,
            ),
            'UpsertShop': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertShop,
                    request_deserializer=data__pb2.UpdateShopReq.FromString,
                    response_serializer=data__pb2.ShopRsb.SerializeToString,
            ),
            'UpsertSupplier': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertSupplier,
                    request_deserializer=data__pb2.UpdateSupplierReq.FromString,
                    response_serializer=data__pb2.SupplierRsb.SerializeToString,
            ),
            'UpsertAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertAccount,
                    request_deserializer=data__pb2.UpdateUserReq.FromString,
                    response_serializer=data__pb2.UserRsb.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=data__pb2.DeleteUserReq.FromString,
                    response_serializer=data__pb2.UserRsb.SerializeToString,
            ),
            'DeleteSupplier': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSupplier,
                    request_deserializer=data__pb2.DeleteById.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'DeleteShop': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteShop,
                    request_deserializer=data__pb2.DeleteById.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'CounterShop': grpc.unary_unary_rpc_method_handler(
                    servicer.CounterShop,
                    request_deserializer=data__pb2.CounterShopReq.FromString,
                    response_serializer=data__pb2.CounterShopRsb.SerializeToString,
            ),
            'CreateBrandCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBrandCollection,
                    request_deserializer=data__pb2.BrandCollectionReq.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'UpdateBrandCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBrandCollection,
                    request_deserializer=data__pb2.BrandCollectionReq.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'QueryBrandCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryBrandCollection,
                    request_deserializer=data__pb2.QueryBrandCollectionReq.FromString,
                    response_serializer=data__pb2.QueryBrandCollectionRsb.SerializeToString,
            ),
            'UpsertComments': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertComments,
                    request_deserializer=data__pb2.UpdateCommentsReq.FromString,
                    response_serializer=data__pb2.UpdateCommentsRsb.SerializeToString,
            ),
            'DeleteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteComment,
                    request_deserializer=data__pb2.DeleteById.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'QueryOfflineOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryOfflineOrder,
                    request_deserializer=common__pb2.QueryInfo.FromString,
                    response_serializer=offline__order__pb2.QueryOfflineOrderResp.SerializeToString,
            ),
            'ReviewOfflineOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ReviewOfflineOrder,
                    request_deserializer=offline__order__pb2.ReviewOfflineOrderReq.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'UpdateOfflineOrderAmount': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOfflineOrderAmount,
                    request_deserializer=offline__order__pb2.UpdateOfflineOrderAmountReq.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'QueryOfflineOrderOperationRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryOfflineOrderOperationRecord,
                    request_deserializer=common__pb2.QueryInfo.FromString,
                    response_serializer=offline__order__pb2.QueryOfflineOrderOperationRecordResp.SerializeToString,
            ),
            'AddOfflineOrderOperationRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.AddOfflineOrderOperationRecord,
                    request_deserializer=offline__order__pb2.AddOfflineOrderOperationRecordReq.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=manager__backend__pb2.LoginReq.FromString,
                    response_serializer=manager__backend__pb2.LoginRes.SerializeToString,
            ),
            'CheckToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckToken,
                    request_deserializer=manager__backend__pb2.CheckTokenReq.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'QueryApplyRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryApplyRecord,
                    request_deserializer=common__pb2.QueryInfo.FromString,
                    response_serializer=data__pb2.QueryApplyRecordResp.SerializeToString,
            ),
            'QueryDistrict': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryDistrict,
                    request_deserializer=common__pb2.QueryInfo.FromString,
                    response_serializer=data__pb2.QueryDistrictResp.SerializeToString,
            ),
            'UpsertApplyRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertApplyRecord,
                    request_deserializer=data__pb2.UpsertApplyRecordReq.FromString,
                    response_serializer=data__pb2.UpsertApplyRecordResp.SerializeToString,
            ),
            'UpsertDistrict': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertDistrict,
                    request_deserializer=data__pb2.UpsertDistrictReq.FromString,
                    response_serializer=data__pb2.UpsertDistrictResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'merchant.MerchantService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MerchantService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def QueryShop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/QueryShop',
            common__pb2.QueryInfo.SerializeToString,
            data__pb2.Shops.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuerySupplier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/QuerySupplier',
            common__pb2.QueryInfo.SerializeToString,
            data__pb2.Suppliers.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/QueryUser',
            common__pb2.QueryInfo.SerializeToString,
            data__pb2.Users.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/QueryCategory',
            common__pb2.QueryInfo.SerializeToString,
            data__pb2.Categories.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/QueryComment',
            common__pb2.QueryInfo.SerializeToString,
            data__pb2.Comments.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertShop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/UpsertShop',
            data__pb2.UpdateShopReq.SerializeToString,
            data__pb2.ShopRsb.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertSupplier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/UpsertSupplier',
            data__pb2.UpdateSupplierReq.SerializeToString,
            data__pb2.SupplierRsb.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/UpsertAccount',
            data__pb2.UpdateUserReq.SerializeToString,
            data__pb2.UserRsb.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/DeleteAccount',
            data__pb2.DeleteUserReq.SerializeToString,
            data__pb2.UserRsb.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSupplier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/DeleteSupplier',
            data__pb2.DeleteById.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteShop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/DeleteShop',
            data__pb2.DeleteById.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CounterShop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/CounterShop',
            data__pb2.CounterShopReq.SerializeToString,
            data__pb2.CounterShopRsb.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBrandCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/CreateBrandCollection',
            data__pb2.BrandCollectionReq.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateBrandCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/UpdateBrandCollection',
            data__pb2.BrandCollectionReq.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryBrandCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/QueryBrandCollection',
            data__pb2.QueryBrandCollectionReq.SerializeToString,
            data__pb2.QueryBrandCollectionRsb.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/UpsertComments',
            data__pb2.UpdateCommentsReq.SerializeToString,
            data__pb2.UpdateCommentsRsb.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/DeleteComment',
            data__pb2.DeleteById.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryOfflineOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/QueryOfflineOrder',
            common__pb2.QueryInfo.SerializeToString,
            offline__order__pb2.QueryOfflineOrderResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReviewOfflineOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/ReviewOfflineOrder',
            offline__order__pb2.ReviewOfflineOrderReq.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateOfflineOrderAmount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/UpdateOfflineOrderAmount',
            offline__order__pb2.UpdateOfflineOrderAmountReq.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryOfflineOrderOperationRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/QueryOfflineOrderOperationRecord',
            common__pb2.QueryInfo.SerializeToString,
            offline__order__pb2.QueryOfflineOrderOperationRecordResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddOfflineOrderOperationRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/AddOfflineOrderOperationRecord',
            offline__order__pb2.AddOfflineOrderOperationRecordReq.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/Login',
            manager__backend__pb2.LoginReq.SerializeToString,
            manager__backend__pb2.LoginRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/CheckToken',
            manager__backend__pb2.CheckTokenReq.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryApplyRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/QueryApplyRecord',
            common__pb2.QueryInfo.SerializeToString,
            data__pb2.QueryApplyRecordResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryDistrict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/QueryDistrict',
            common__pb2.QueryInfo.SerializeToString,
            data__pb2.QueryDistrictResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertApplyRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/UpsertApplyRecord',
            data__pb2.UpsertApplyRecordReq.SerializeToString,
            data__pb2.UpsertApplyRecordResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertDistrict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/merchant.MerchantService/UpsertDistrict',
            data__pb2.UpsertDistrictReq.SerializeToString,
            data__pb2.UpsertDistrictResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
